{ "time": "2023-09-05 11:34:08.9517", "level": "Debug", "logger": "Program", "message": "init main" }
{ "time": "2023-09-05 11:34:12.4254", "level": "Debug", "logger": "Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderFactory", "message": "Registered model binder providers, in the following order: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BinderTypeModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ServicesModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BodyModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.HeaderModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FloatingPointTypeModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.EnumTypeModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DateTimeModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.SimpleTypeModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.TryParseModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CancellationTokenModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ByteArrayModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormFileModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormCollectionModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.KeyValuePairModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DictionaryModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ArrayModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexObjectModelBinderProvider", "ModelBinderProviders": ["Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BinderTypeModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ServicesModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BodyModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.HeaderModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FloatingPointTypeModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.EnumTypeModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DateTimeModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.SimpleTypeModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.TryParseModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CancellationTokenModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ByteArrayModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormFileModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormCollectionModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.KeyValuePairModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DictionaryModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ArrayModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexObjectModelBinderProvider"], "EventId": 12, "EventName": "RegisteredModelBinderProviders" }
{ "time": "2023-09-05 11:34:13.5924", "level": "Debug", "logger": "Microsoft.Extensions.Hosting.Internal.Host", "message": "Hosting starting", "EventId": 1, "EventName": "Starting" }
{ "time": "2023-09-05 11:34:14.3806", "level": "Debug", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Loaded hosting startup assembly TestBackend.Api", "assemblyName": "TestBackend.Api", "EventId": 13, "EventName": "HostingStartupAssemblyLoaded" }
{ "time": "2023-09-05 11:34:14.3806", "level": "Debug", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Loaded hosting startup assembly Microsoft.AspNetCore.Watch.BrowserRefresh", "assemblyName": "Microsoft.AspNetCore.Watch.BrowserRefresh", "EventId": 13, "EventName": "HostingStartupAssemblyLoaded" }
{ "time": "2023-09-05 11:34:14.3806", "level": "Debug", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Loaded hosting startup assembly Microsoft.WebTools.BrowserLink.Net", "assemblyName": "Microsoft.WebTools.BrowserLink.Net", "EventId": 13, "EventName": "HostingStartupAssemblyLoaded" }
{ "time": "2023-09-05 11:34:14.3806", "level": "Info", "logger": "Microsoft.Hosting.Lifetime", "message": "Application started. Press Ctrl+C to shut down." }
{ "time": "2023-09-05 11:34:14.3806", "level": "Info", "logger": "Microsoft.Hosting.Lifetime", "message": "Hosting environment: Development", "EnvName": "Development" }
{ "time": "2023-09-05 11:34:14.3806", "level": "Info", "logger": "Microsoft.Hosting.Lifetime", "message": "Content root path: F:\\Программирование\\Test_Backend\\Test_Backend.Api", "ContentRoot": "F:\\Программирование\\Test_Backend\\Test_Backend.Api" }
{ "time": "2023-09-05 11:34:14.3806", "level": "Debug", "logger": "Microsoft.Extensions.Hosting.Internal.Host", "message": "Hosting started", "EventId": 2, "EventName": "Started" }
{ "time": "2023-09-05 11:34:14.8707", "level": "Info", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request starting HTTP/1.1 GET http://localhost:42486/swagger/index.html - -", "url": "http://localhost/swagger/index.html", "Protocol": "HTTP/1.1", "Method": "GET", "ContentType": null, "ContentLength": null, "Scheme": "http", "Host": "localhost:42486", "PathBase": "", "Path": "/swagger/index.html", "QueryString": "", "EventId": 1 }
{ "time": "2023-09-05 11:34:14.9943", "level": "Debug", "logger": "Microsoft.AspNetCore.HostFiltering.HostFilteringMiddleware", "message": "Wildcard detected, all requests with hosts will be allowed.", "url": "http://localhost/swagger/index.html" }
{ "time": "2023-09-05 11:34:14.9943", "level": "Trace", "logger": "Microsoft.AspNetCore.HostFiltering.HostFilteringMiddleware", "message": "All hosts are allowed.", "url": "http://localhost/swagger/index.html", "EventId": 2, "EventName": "AllHostsAllowed" }
{ "time": "2023-09-05 11:34:15.0944", "level": "Debug", "logger": "Microsoft.AspNetCore.Routing.Matching.DfaMatcher", "message": "No candidates found for the request path '/swagger/index.html'", "url": "http://localhost/swagger/index.html", "Path": "/swagger/index.html", "EventId": 1000, "EventName": "CandidatesNotFound" }
{ "time": "2023-09-05 11:34:15.0944", "level": "Debug", "logger": "Microsoft.AspNetCore.Routing.EndpointRoutingMiddleware", "message": "Request did not match any endpoints", "url": "http://localhost/swagger/index.html", "EventId": 2, "EventName": "MatchFailure" }
{ "time": "2023-09-05 11:34:15.9621", "level": "Debug", "logger": "Microsoft.AspNetCore.Watch.BrowserRefresh.BrowserRefreshMiddleware", "message": "Response markup is scheduled to include browser refresh script injection.", "url": "http://localhost/swagger/index.html", "EventId": 1, "EventName": "SetUpResponseForBrowserRefresh" }
{ "time": "2023-09-05 11:34:17.9340", "level": "Debug", "logger": "Microsoft.AspNetCore.Watch.BrowserRefresh.BrowserRefreshMiddleware", "message": "Response markup was updated to include browser refresh script injection.", "url": "http://localhost/swagger/index.html", "EventId": 2, "EventName": "BrowserConfiguredForRefreshes" }
{ "time": "2023-09-05 11:34:18.0676", "level": "Info", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request finished HTTP/1.1 GET http://localhost:42486/swagger/index.html - - - 200 - text/html;charset=utf-8 3135.1469ms", "url": "http://localhost/swagger/index.html", "ElapsedMilliseconds": 3135.1469, "StatusCode": 200, "ContentType": "text/html;charset=utf-8", "ContentLength": null, "Protocol": "HTTP/1.1", "Method": "GET", "Scheme": "http", "Host": "localhost:42486", "PathBase": "", "Path": "/swagger/index.html", "QueryString": "", "EventId": 2 }
{ "time": "2023-09-05 11:34:18.2044", "level": "Info", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request starting HTTP/1.1 GET http://localhost:42486/_framework/aspnetcore-browser-refresh.js - -", "url": "http://localhost/_framework/aspnetcore-browser-refresh.js", "Protocol": "HTTP/1.1", "Method": "GET", "ContentType": null, "ContentLength": null, "Scheme": "http", "Host": "localhost:42486", "PathBase": "", "Path": "/_framework/aspnetcore-browser-refresh.js", "QueryString": "", "EventId": 1 }
{ "time": "2023-09-05 11:34:18.2585", "level": "Info", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request finished HTTP/1.1 GET http://localhost:42486/_framework/aspnetcore-browser-refresh.js - - - 200 12000 application/javascript;+charset=utf-8 53.3722ms", "url": "http://localhost/_framework/aspnetcore-browser-refresh.js", "ElapsedMilliseconds": 53.3722, "StatusCode": 200, "ContentType": "application/javascript; charset=utf-8", "ContentLength": 12000, "Protocol": "HTTP/1.1", "Method": "GET", "Scheme": "http", "Host": "localhost:42486", "PathBase": "", "Path": "/_framework/aspnetcore-browser-refresh.js", "QueryString": "", "EventId": 2 }
{ "time": "2023-09-05 11:34:18.3034", "level": "Info", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request starting HTTP/1.1 GET http://localhost:42486/_vs/browserLink - -", "url": "http://localhost/_vs/browserLink", "Protocol": "HTTP/1.1", "Method": "GET", "ContentType": null, "ContentLength": null, "Scheme": "http", "Host": "localhost:42486", "PathBase": "", "Path": "/_vs/browserLink", "QueryString": "", "EventId": 1 }
{ "time": "2023-09-05 11:34:18.8047", "level": "Info", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request finished HTTP/1.1 GET http://localhost:42486/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 501.0717ms", "url": "http://localhost/_vs/browserLink", "ElapsedMilliseconds": 501.0717, "StatusCode": 200, "ContentType": "text/javascript; charset=UTF-8", "ContentLength": null, "Protocol": "HTTP/1.1", "Method": "GET", "Scheme": "http", "Host": "localhost:42486", "PathBase": "", "Path": "/_vs/browserLink", "QueryString": "", "EventId": 2 }
{ "time": "2023-09-05 11:34:18.9622", "level": "Info", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request starting HTTP/1.1 GET http://localhost:42486/swagger/v1/swagger.json - -", "url": "http://localhost/swagger/v1/swagger.json", "Protocol": "HTTP/1.1", "Method": "GET", "ContentType": null, "ContentLength": null, "Scheme": "http", "Host": "localhost:42486", "PathBase": "", "Path": "/swagger/v1/swagger.json", "QueryString": "", "EventId": 1 }
{ "time": "2023-09-05 11:34:18.9638", "level": "Trace", "logger": "Microsoft.AspNetCore.HostFiltering.HostFilteringMiddleware", "message": "All hosts are allowed.", "url": "http://localhost/swagger/v1/swagger.json", "EventId": 2, "EventName": "AllHostsAllowed" }
{ "time": "2023-09-05 11:34:18.9638", "level": "Debug", "logger": "Microsoft.AspNetCore.Routing.Matching.DfaMatcher", "message": "No candidates found for the request path '/swagger/v1/swagger.json'", "url": "http://localhost/swagger/v1/swagger.json", "Path": "/swagger/v1/swagger.json", "EventId": 1000, "EventName": "CandidatesNotFound" }
{ "time": "2023-09-05 11:34:18.9638", "level": "Debug", "logger": "Microsoft.AspNetCore.Routing.EndpointRoutingMiddleware", "message": "Request did not match any endpoints", "url": "http://localhost/swagger/v1/swagger.json", "EventId": 2, "EventName": "MatchFailure" }
{ "time": "2023-09-05 11:34:19.9164", "level": "Info", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request finished HTTP/1.1 GET http://localhost:42486/swagger/v1/swagger.json - - - 200 - application/json;charset=utf-8 953.9854ms", "url": "http://localhost/swagger/v1/swagger.json", "ElapsedMilliseconds": 953.9854, "StatusCode": 200, "ContentType": "application/json;charset=utf-8", "ContentLength": null, "Protocol": "HTTP/1.1", "Method": "GET", "Scheme": "http", "Host": "localhost:42486", "PathBase": "", "Path": "/swagger/v1/swagger.json", "QueryString": "", "EventId": 2 }
{ "time": "2023-09-05 11:34:28.2749", "level": "Info", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request starting HTTP/1.1 GET http://localhost:42486/api/v1/Persons - -", "url": "http://localhost/api/v1/Persons", "Protocol": "HTTP/1.1", "Method": "GET", "ContentType": null, "ContentLength": null, "Scheme": "http", "Host": "localhost:42486", "PathBase": "", "Path": "/api/v1/Persons", "QueryString": "", "EventId": 1 }
{ "time": "2023-09-05 11:34:28.2757", "level": "Trace", "logger": "Microsoft.AspNetCore.HostFiltering.HostFilteringMiddleware", "message": "All hosts are allowed.", "url": "http://localhost/api/v1/Persons", "EventId": 2, "EventName": "AllHostsAllowed" }
{ "time": "2023-09-05 11:34:28.2998", "level": "Debug", "logger": "Microsoft.AspNetCore.Routing.Matching.DfaMatcher", "message": "1 candidate(s) found for the request path '/api/v1/Persons'", "url": "http://localhost/api/v1/Persons", "CandidateCount": 1, "Path": "/api/v1/Persons", "EventId": 1001, "EventName": "CandidatesFound" }
{ "time": "2023-09-05 11:34:28.3183", "level": "Debug", "logger": "Microsoft.AspNetCore.Routing.Matching.DfaMatcher", "message": "Endpoint 'TestBackend.Api.Controllers.PersonsController.GetAllPersons (TestBackend.Api)' with route pattern 'api/v1/Persons' is valid for the request path '/api/v1/Persons'", "url": "http://localhost/api/v1/Persons", "Endpoint": "TestBackend.Api.Controllers.PersonsController.GetAllPersons (TestBackend.Api)", "RoutePattern": "api/v1/Persons", "Path": "/api/v1/Persons", "EventId": 1005, "EventName": "CandidateValid" }
{ "time": "2023-09-05 11:34:28.3183", "level": "Debug", "logger": "Microsoft.AspNetCore.Routing.EndpointRoutingMiddleware", "message": "Request matched endpoint 'TestBackend.Api.Controllers.PersonsController.GetAllPersons (TestBackend.Api)'", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "EndpointName": "TestBackend.Api.Controllers.PersonsController.GetAllPersons (TestBackend.Api)", "EventId": 1, "EventName": "MatchSuccess" }
{ "time": "2023-09-05 11:34:28.3789", "level": "Debug", "logger": "Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware", "message": "Static files was skipped as the request already matched an endpoint.", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "EventId": 15, "EventName": "EndpointMatched" }
{ "time": "2023-09-05 11:34:28.4137", "level": "Info", "logger": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "message": "Executing endpoint 'TestBackend.Api.Controllers.PersonsController.GetAllPersons (TestBackend.Api)'", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "EndpointName": {"Order":0, "RoutePattern":"Microsoft.AspNetCore.Routing.Patterns.RoutePattern", "DisplayName":"TestBackend.Api.Controllers.PersonsController.GetAllPersons (TestBackend.Api)", "Metadata":[], "RequestDelegate":"Microsoft.AspNetCore.Http.RequestDelegate"} }
{ "time": "2023-09-05 11:34:28.6433", "level": "Info", "logger": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "message": "Route matched with {action = \"GetAllPersons\", controller = \"Persons\"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetAllPersons() on controller TestBackend.Api.Controllers.PersonsController (TestBackend.Api).", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "RouteData": "{action = \"GetAllPersons\", controller = \"Persons\"}", "MethodInfo": "Microsoft.AspNetCore.Mvc.IActionResult GetAllPersons()", "Controller": "TestBackend.Api.Controllers.PersonsController", "AssemblyName": "TestBackend.Api", "EventId": 102, "EventName": "ControllerActionExecuting" }
{ "time": "2023-09-05 11:34:28.6754", "level": "Debug", "logger": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "message": "Execution plan of authorization filters (in the following order): None", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "FilterType": "authorization", "Filters": ["None"], "EventId": 1, "EventName": "FilterExecutionPlan" }
{ "time": "2023-09-05 11:34:28.6754", "level": "Debug", "logger": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "message": "Execution plan of resource filters (in the following order): None", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "FilterType": "resource", "Filters": ["None"], "EventId": 1, "EventName": "FilterExecutionPlan" }
{ "time": "2023-09-05 11:34:28.6754", "level": "Debug", "logger": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "message": "Execution plan of action filters (in the following order): Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter (Order: -3000), Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter (Order: -2000)", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "FilterType": "action", "Filters": ["Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter (Order: -3000)","Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter (Order: -2000)"], "EventId": 1, "EventName": "FilterExecutionPlan" }
{ "time": "2023-09-05 11:34:28.6754", "level": "Debug", "logger": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "message": "Execution plan of exception filters (in the following order): None", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "FilterType": "exception", "Filters": ["None"], "EventId": 1, "EventName": "FilterExecutionPlan" }
{ "time": "2023-09-05 11:34:28.6754", "level": "Debug", "logger": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "message": "Execution plan of result filters (in the following order): Microsoft.AspNetCore.Mvc.Infrastructure.ClientErrorResultFilter (Order: -2000)", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "FilterType": "result", "Filters": ["Microsoft.AspNetCore.Mvc.Infrastructure.ClientErrorResultFilter (Order: -2000)"], "EventId": 1, "EventName": "FilterExecutionPlan" }
{ "time": "2023-09-05 11:34:28.6963", "level": "Debug", "logger": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "message": "Executing controller factory for controller TestBackend.Api.Controllers.PersonsController (TestBackend.Api)", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "Controller": "TestBackend.Api.Controllers.PersonsController", "AssemblyName": "TestBackend.Api", "EventId": 1, "EventName": "ControllerFactoryExecuting" }
{ "time": "2023-09-05 11:34:50.1515", "level": "Debug", "logger": "TestBackend.Api.Controllers.PersonsController", "message": "NLog injected into TestBackend", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons" }
{ "time": "2023-09-05 11:34:50.1837", "level": "Debug", "logger": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "message": "Executed controller factory for controller TestBackend.Api.Controllers.PersonsController (TestBackend.Api)", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "Controller": "TestBackend.Api.Controllers.PersonsController", "AssemblyName": "TestBackend.Api", "EventId": 2, "EventName": "ControllerFactoryExecuted" }
{ "time": "2023-09-05 11:34:50.1837", "level": "Trace", "logger": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "message": "Action Filter: Before executing OnActionExecuting on filter Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter.", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "FilterType": "Action Filter", "Method": "OnActionExecuting", "Filter": {"Order":-3000}, "EventId": 52, "EventName": "BeforeExecutingMethodOnFilter" }
{ "time": "2023-09-05 11:34:50.1837", "level": "Trace", "logger": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "message": "Action Filter: After executing OnActionExecuting on filter Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter.", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "FilterType": "Action Filter", "Method": "OnActionExecuting", "Filter": {"Order":-3000}, "EventId": 53, "EventName": "AfterExecutingMethodOnFilter" }
{ "time": "2023-09-05 11:34:50.1984", "level": "Trace", "logger": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "message": "Action Filter: Before executing OnActionExecuting on filter Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter.", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "FilterType": "Action Filter", "Method": "OnActionExecuting", "Filter": {"Order":-2000, "IsReusable":true}, "EventId": 52, "EventName": "BeforeExecutingMethodOnFilter" }
{ "time": "2023-09-05 11:34:50.1984", "level": "Trace", "logger": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "message": "Action Filter: After executing OnActionExecuting on filter Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter.", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "FilterType": "Action Filter", "Method": "OnActionExecuting", "Filter": {"Order":-2000, "IsReusable":true}, "EventId": 53, "EventName": "AfterExecutingMethodOnFilter" }
{ "time": "2023-09-05 11:34:50.1984", "level": "Info", "logger": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "message": "Executing action method TestBackend.Api.Controllers.PersonsController.GetAllPersons (TestBackend.Api) - Validation state: Valid", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "ActionName": "TestBackend.Api.Controllers.PersonsController.GetAllPersons (TestBackend.Api)", "ValidationState": "Valid", "EventId": 101, "EventName": "ActionMethodExecuting" }
{ "time": "2023-09-05 11:34:51.5030", "level": "Info", "logger": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "message": "Executed action method TestBackend.Api.Controllers.PersonsController.GetAllPersons (TestBackend.Api), returned result Microsoft.AspNetCore.Mvc.OkObjectResult in 1291.9ms.", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "ActionName": "TestBackend.Api.Controllers.PersonsController.GetAllPersons (TestBackend.Api)", "ActionResult": "Microsoft.AspNetCore.Mvc.OkObjectResult", "ElapsedMilliseconds": 1291.9, "EventId": 103, "EventName": "ActionMethodExecuted" }
{ "time": "2023-09-05 11:34:51.5030", "level": "Trace", "logger": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "message": "Action Filter: Before executing OnActionExecuted on filter Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter.", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "FilterType": "Action Filter", "Method": "OnActionExecuted", "Filter": {"Order":-2000, "IsReusable":true}, "EventId": 52, "EventName": "BeforeExecutingMethodOnFilter" }
{ "time": "2023-09-05 11:34:51.5030", "level": "Trace", "logger": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "message": "Action Filter: After executing OnActionExecuted on filter Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter.", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "FilterType": "Action Filter", "Method": "OnActionExecuted", "Filter": {"Order":-2000, "IsReusable":true}, "EventId": 53, "EventName": "AfterExecutingMethodOnFilter" }
{ "time": "2023-09-05 11:34:51.5030", "level": "Trace", "logger": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "message": "Action Filter: Before executing OnActionExecuted on filter Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter.", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "FilterType": "Action Filter", "Method": "OnActionExecuted", "Filter": {"Order":-3000}, "EventId": 52, "EventName": "BeforeExecutingMethodOnFilter" }
{ "time": "2023-09-05 11:34:51.5030", "level": "Trace", "logger": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "message": "Action Filter: After executing OnActionExecuted on filter Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter.", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "FilterType": "Action Filter", "Method": "OnActionExecuted", "Filter": {"Order":-3000}, "EventId": 53, "EventName": "AfterExecutingMethodOnFilter" }
{ "time": "2023-09-05 11:34:51.5030", "level": "Trace", "logger": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "message": "Result Filter: Before executing OnResultExecuting on filter Microsoft.AspNetCore.Mvc.Infrastructure.ClientErrorResultFilter.", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "FilterType": "Result Filter", "Method": "OnResultExecuting", "Filter": {"Order":-2000}, "EventId": 52, "EventName": "BeforeExecutingMethodOnFilter" }
{ "time": "2023-09-05 11:34:51.5030", "level": "Trace", "logger": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "message": "Result Filter: After executing OnResultExecuting on filter Microsoft.AspNetCore.Mvc.Infrastructure.ClientErrorResultFilter.", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "FilterType": "Result Filter", "Method": "OnResultExecuting", "Filter": {"Order":-2000}, "EventId": 53, "EventName": "AfterExecutingMethodOnFilter" }
{ "time": "2023-09-05 11:34:51.5184", "level": "Trace", "logger": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "message": "Before executing action result Microsoft.AspNetCore.Mvc.OkObjectResult.", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "ActionResult": "Microsoft.AspNetCore.Mvc.OkObjectResult", "EventId": 5, "EventName": "BeforeExecutingActionResult" }
{ "time": "2023-09-05 11:34:51.5184", "level": "Debug", "logger": "Microsoft.AspNetCore.Mvc.Infrastructure.DefaultOutputFormatterSelector", "message": "List of registered output formatters, in the following order: Microsoft.AspNetCore.Mvc.Formatters.HttpNoContentOutputFormatter, Microsoft.AspNetCore.Mvc.Formatters.StringOutputFormatter, Microsoft.AspNetCore.Mvc.Formatters.StreamOutputFormatter, Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "OutputFormatters": [{"TreatNullValueAsNoContent":true},{"SupportedEncodings":[], "SupportedMediaTypes":[]},"Microsoft.AspNetCore.Mvc.Formatters.StreamOutputFormatter",{"SerializerOptions":"System.Text.Json.JsonSerializerOptions", "SupportedEncodings":[], "SupportedMediaTypes":[]}], "EventId": 11, "EventName": "RegisteredOutputFormatters" }
{ "time": "2023-09-05 11:34:51.5330", "level": "Debug", "logger": "Microsoft.AspNetCore.Mvc.Infrastructure.DefaultOutputFormatterSelector", "message": "No information found on request to perform content negotiation.", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "EventId": 4, "EventName": "NoAcceptForNegotiation" }
{ "time": "2023-09-05 11:34:51.5330", "level": "Debug", "logger": "Microsoft.AspNetCore.Mvc.Infrastructure.DefaultOutputFormatterSelector", "message": "Attempting to select an output formatter without using a content type as no explicit content types were specified for the response.", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "EventId": 8, "EventName": "SelectingOutputFormatterWithoutUsingContentTypes" }
{ "time": "2023-09-05 11:34:51.5330", "level": "Debug", "logger": "Microsoft.AspNetCore.Mvc.Infrastructure.DefaultOutputFormatterSelector", "message": "Attempting to select the first formatter in the output formatters list which can write the result.", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "EventId": 10, "EventName": "SelectingFirstCanWriteFormatter" }
{ "time": "2023-09-05 11:34:51.5330", "level": "Debug", "logger": "Microsoft.AspNetCore.Mvc.Infrastructure.DefaultOutputFormatterSelector", "message": "Selected output formatter 'Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter' and content type 'application/json' to write the response.", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "OutputFormatter": {"SerializerOptions":"System.Text.Json.JsonSerializerOptions", "SupportedEncodings":[], "SupportedMediaTypes":[]}, "ContentType": "application/json", "EventId": 2, "EventName": "FormatterSelected" }
{ "time": "2023-09-05 11:34:51.5330", "level": "Info", "logger": "Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor", "message": "Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[TestBackend.Common.Models.PersonModel, TestBackend.Common.Models, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "ObjectResultType": "OkObjectResult", "Type": "System.Collections.Generic.List`1[[TestBackend.Common.Models.PersonModel, TestBackend.Common.Models, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]", "EventId": 1, "EventName": "ObjectResultExecuting" }
{ "time": "2023-09-05 11:34:51.5922", "level": "Trace", "logger": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "message": "After executing action result Microsoft.AspNetCore.Mvc.OkObjectResult.", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "ActionResult": "Microsoft.AspNetCore.Mvc.OkObjectResult", "EventId": 6, "EventName": "AfterExecutingActionResult" }
{ "time": "2023-09-05 11:34:51.5922", "level": "Trace", "logger": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "message": "Result Filter: Before executing OnResultExecuted on filter Microsoft.AspNetCore.Mvc.Infrastructure.ClientErrorResultFilter.", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "FilterType": "Result Filter", "Method": "OnResultExecuted", "Filter": {"Order":-2000}, "EventId": 52, "EventName": "BeforeExecutingMethodOnFilter" }
{ "time": "2023-09-05 11:34:51.5922", "level": "Trace", "logger": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "message": "Result Filter: After executing OnResultExecuted on filter Microsoft.AspNetCore.Mvc.Infrastructure.ClientErrorResultFilter.", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "FilterType": "Result Filter", "Method": "OnResultExecuted", "Filter": {"Order":-2000}, "EventId": 53, "EventName": "AfterExecutingMethodOnFilter" }
{ "time": "2023-09-05 11:34:51.5922", "level": "Info", "logger": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "message": "Executed action TestBackend.Api.Controllers.PersonsController.GetAllPersons (TestBackend.Api) in 22916.367ms", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "ActionName": "TestBackend.Api.Controllers.PersonsController.GetAllPersons (TestBackend.Api)", "ElapsedMilliseconds": 22916.367, "EventId": 105, "EventName": "ActionExecuted" }
{ "time": "2023-09-05 11:34:51.5922", "level": "Info", "logger": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "message": "Executed endpoint 'TestBackend.Api.Controllers.PersonsController.GetAllPersons (TestBackend.Api)'", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "EndpointName": {"Order":0, "RoutePattern":"Microsoft.AspNetCore.Routing.Patterns.RoutePattern", "DisplayName":"TestBackend.Api.Controllers.PersonsController.GetAllPersons (TestBackend.Api)", "Metadata":[], "RequestDelegate":"Microsoft.AspNetCore.Http.RequestDelegate"}, "EventId": 1, "EventName": "ExecutedEndpoint" }
{ "time": "2023-09-05 11:34:51.6246", "level": "Info", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request finished HTTP/1.1 GET http://localhost:42486/api/v1/Persons - - - 200 - application/json;+charset=utf-8 23349.7153ms", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "ElapsedMilliseconds": 23349.7153, "StatusCode": 200, "ContentType": "application/json; charset=utf-8", "ContentLength": null, "Protocol": "HTTP/1.1", "Method": "GET", "Scheme": "http", "Host": "localhost:42486", "PathBase": "", "Path": "/api/v1/Persons", "QueryString": "", "EventId": 2 }
{ "time": "2023-09-05 11:56:32.8913", "level": "Debug", "logger": "Program", "message": "init main" }
{ "time": "2023-09-05 11:56:35.0730", "level": "Debug", "logger": "Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderFactory", "message": "Registered model binder providers, in the following order: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BinderTypeModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ServicesModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BodyModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.HeaderModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FloatingPointTypeModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.EnumTypeModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DateTimeModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.SimpleTypeModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.TryParseModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CancellationTokenModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ByteArrayModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormFileModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormCollectionModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.KeyValuePairModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DictionaryModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ArrayModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexObjectModelBinderProvider", "ModelBinderProviders": ["Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BinderTypeModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ServicesModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BodyModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.HeaderModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FloatingPointTypeModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.EnumTypeModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DateTimeModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.SimpleTypeModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.TryParseModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CancellationTokenModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ByteArrayModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormFileModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormCollectionModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.KeyValuePairModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DictionaryModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ArrayModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexObjectModelBinderProvider"], "EventId": 12, "EventName": "RegisteredModelBinderProviders" }
{ "time": "2023-09-05 11:56:35.2399", "level": "Debug", "logger": "Microsoft.Extensions.Hosting.Internal.Host", "message": "Hosting starting", "EventId": 1, "EventName": "Starting" }
{ "time": "2023-09-05 11:56:35.4632", "level": "Debug", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Loaded hosting startup assembly TestBackend.Api", "assemblyName": "TestBackend.Api", "EventId": 13, "EventName": "HostingStartupAssemblyLoaded" }
{ "time": "2023-09-05 11:56:35.4632", "level": "Debug", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Loaded hosting startup assembly Microsoft.AspNetCore.Watch.BrowserRefresh", "assemblyName": "Microsoft.AspNetCore.Watch.BrowserRefresh", "EventId": 13, "EventName": "HostingStartupAssemblyLoaded" }
{ "time": "2023-09-05 11:56:35.4632", "level": "Debug", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Loaded hosting startup assembly Microsoft.WebTools.BrowserLink.Net", "assemblyName": "Microsoft.WebTools.BrowserLink.Net", "EventId": 13, "EventName": "HostingStartupAssemblyLoaded" }
{ "time": "2023-09-05 11:56:35.4632", "level": "Info", "logger": "Microsoft.Hosting.Lifetime", "message": "Application started. Press Ctrl+C to shut down." }
{ "time": "2023-09-05 11:56:35.4632", "level": "Info", "logger": "Microsoft.Hosting.Lifetime", "message": "Hosting environment: Development", "EnvName": "Development" }
{ "time": "2023-09-05 11:56:35.4632", "level": "Info", "logger": "Microsoft.Hosting.Lifetime", "message": "Content root path: F:\\Программирование\\Test_Backend\\Test_Backend.Api", "ContentRoot": "F:\\Программирование\\Test_Backend\\Test_Backend.Api" }
{ "time": "2023-09-05 11:56:35.4632", "level": "Debug", "logger": "Microsoft.Extensions.Hosting.Internal.Host", "message": "Hosting started", "EventId": 2, "EventName": "Started" }
{ "time": "2023-09-05 11:56:35.5638", "level": "Info", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request starting HTTP/1.1 GET http://localhost:42486/swagger/index.html - -", "url": "http://localhost/swagger/index.html", "Protocol": "HTTP/1.1", "Method": "GET", "ContentType": null, "ContentLength": null, "Scheme": "http", "Host": "localhost:42486", "PathBase": "", "Path": "/swagger/index.html", "QueryString": "", "EventId": 1 }
{ "time": "2023-09-05 11:56:35.6593", "level": "Debug", "logger": "Microsoft.AspNetCore.HostFiltering.HostFilteringMiddleware", "message": "Wildcard detected, all requests with hosts will be allowed.", "url": "http://localhost/swagger/index.html" }
{ "time": "2023-09-05 11:56:35.6593", "level": "Trace", "logger": "Microsoft.AspNetCore.HostFiltering.HostFilteringMiddleware", "message": "All hosts are allowed.", "url": "http://localhost/swagger/index.html", "EventId": 2, "EventName": "AllHostsAllowed" }
{ "time": "2023-09-05 11:56:35.7029", "level": "Debug", "logger": "Microsoft.AspNetCore.Routing.Matching.DfaMatcher", "message": "No candidates found for the request path '/swagger/index.html'", "url": "http://localhost/swagger/index.html", "Path": "/swagger/index.html", "EventId": 1000, "EventName": "CandidatesNotFound" }
{ "time": "2023-09-05 11:56:35.7029", "level": "Debug", "logger": "Microsoft.AspNetCore.Routing.EndpointRoutingMiddleware", "message": "Request did not match any endpoints", "url": "http://localhost/swagger/index.html", "EventId": 2, "EventName": "MatchFailure" }
{ "time": "2023-09-05 11:56:35.9057", "level": "Debug", "logger": "Microsoft.AspNetCore.Watch.BrowserRefresh.BrowserRefreshMiddleware", "message": "Response markup is scheduled to include browser refresh script injection.", "url": "http://localhost/swagger/index.html", "EventId": 1, "EventName": "SetUpResponseForBrowserRefresh" }
{ "time": "2023-09-05 11:56:36.2259", "level": "Debug", "logger": "Microsoft.AspNetCore.Watch.BrowserRefresh.BrowserRefreshMiddleware", "message": "Response markup was updated to include browser refresh script injection.", "url": "http://localhost/swagger/index.html", "EventId": 2, "EventName": "BrowserConfiguredForRefreshes" }
{ "time": "2023-09-05 11:56:36.2337", "level": "Info", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request finished HTTP/1.1 GET http://localhost:42486/swagger/index.html - - - 200 - text/html;charset=utf-8 670.6375ms", "url": "http://localhost/swagger/index.html", "ElapsedMilliseconds": 670.6375, "StatusCode": 200, "ContentType": "text/html;charset=utf-8", "ContentLength": null, "Protocol": "HTTP/1.1", "Method": "GET", "Scheme": "http", "Host": "localhost:42486", "PathBase": "", "Path": "/swagger/index.html", "QueryString": "", "EventId": 2 }
{ "time": "2023-09-05 11:56:36.3103", "level": "Info", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request starting HTTP/1.1 GET http://localhost:42486/_framework/aspnetcore-browser-refresh.js - -", "url": "http://localhost/_framework/aspnetcore-browser-refresh.js", "Protocol": "HTTP/1.1", "Method": "GET", "ContentType": null, "ContentLength": null, "Scheme": "http", "Host": "localhost:42486", "PathBase": "", "Path": "/_framework/aspnetcore-browser-refresh.js", "QueryString": "", "EventId": 1 }
{ "time": "2023-09-05 11:56:36.3252", "level": "Info", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request finished HTTP/1.1 GET http://localhost:42486/_framework/aspnetcore-browser-refresh.js - - - 200 12000 application/javascript;+charset=utf-8 14.1138ms", "url": "http://localhost/_framework/aspnetcore-browser-refresh.js", "ElapsedMilliseconds": 14.1138, "StatusCode": 200, "ContentType": "application/javascript; charset=utf-8", "ContentLength": 12000, "Protocol": "HTTP/1.1", "Method": "GET", "Scheme": "http", "Host": "localhost:42486", "PathBase": "", "Path": "/_framework/aspnetcore-browser-refresh.js", "QueryString": "", "EventId": 2 }
{ "time": "2023-09-05 11:56:36.3252", "level": "Info", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request starting HTTP/1.1 GET http://localhost:42486/_vs/browserLink - -", "url": "http://localhost/_vs/browserLink", "Protocol": "HTTP/1.1", "Method": "GET", "ContentType": null, "ContentLength": null, "Scheme": "http", "Host": "localhost:42486", "PathBase": "", "Path": "/_vs/browserLink", "QueryString": "", "EventId": 1 }
{ "time": "2023-09-05 11:56:36.4011", "level": "Info", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request finished HTTP/1.1 GET http://localhost:42486/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 64.7803ms", "url": "http://localhost/_vs/browserLink", "ElapsedMilliseconds": 64.7803, "StatusCode": 200, "ContentType": "text/javascript; charset=UTF-8", "ContentLength": null, "Protocol": "HTTP/1.1", "Method": "GET", "Scheme": "http", "Host": "localhost:42486", "PathBase": "", "Path": "/_vs/browserLink", "QueryString": "", "EventId": 2 }
{ "time": "2023-09-05 11:56:36.5586", "level": "Info", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request starting HTTP/1.1 GET http://localhost:42486/swagger/v1/swagger.json - -", "url": "http://localhost/swagger/v1/swagger.json", "Protocol": "HTTP/1.1", "Method": "GET", "ContentType": null, "ContentLength": null, "Scheme": "http", "Host": "localhost:42486", "PathBase": "", "Path": "/swagger/v1/swagger.json", "QueryString": "", "EventId": 1 }
{ "time": "2023-09-05 11:56:36.5586", "level": "Trace", "logger": "Microsoft.AspNetCore.HostFiltering.HostFilteringMiddleware", "message": "All hosts are allowed.", "url": "http://localhost/swagger/v1/swagger.json", "EventId": 2, "EventName": "AllHostsAllowed" }
{ "time": "2023-09-05 11:56:36.5586", "level": "Debug", "logger": "Microsoft.AspNetCore.Routing.Matching.DfaMatcher", "message": "No candidates found for the request path '/swagger/v1/swagger.json'", "url": "http://localhost/swagger/v1/swagger.json", "Path": "/swagger/v1/swagger.json", "EventId": 1000, "EventName": "CandidatesNotFound" }
{ "time": "2023-09-05 11:56:36.5586", "level": "Debug", "logger": "Microsoft.AspNetCore.Routing.EndpointRoutingMiddleware", "message": "Request did not match any endpoints", "url": "http://localhost/swagger/v1/swagger.json", "EventId": 2, "EventName": "MatchFailure" }
{ "time": "2023-09-05 11:56:36.7782", "level": "Info", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request finished HTTP/1.1 GET http://localhost:42486/swagger/v1/swagger.json - - - 200 - application/json;charset=utf-8 219.5702ms", "url": "http://localhost/swagger/v1/swagger.json", "ElapsedMilliseconds": 219.5702, "StatusCode": 200, "ContentType": "application/json;charset=utf-8", "ContentLength": null, "Protocol": "HTTP/1.1", "Method": "GET", "Scheme": "http", "Host": "localhost:42486", "PathBase": "", "Path": "/swagger/v1/swagger.json", "QueryString": "", "EventId": 2 }
{ "time": "2023-09-05 11:58:54.4395", "level": "Info", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request starting HTTP/1.1 GET http://localhost:42486/api/v1/Persons - -", "url": "http://localhost/api/v1/Persons", "Protocol": "HTTP/1.1", "Method": "GET", "ContentType": null, "ContentLength": null, "Scheme": "http", "Host": "localhost:42486", "PathBase": "", "Path": "/api/v1/Persons", "QueryString": "", "EventId": 1 }
{ "time": "2023-09-05 11:58:54.4395", "level": "Trace", "logger": "Microsoft.AspNetCore.HostFiltering.HostFilteringMiddleware", "message": "All hosts are allowed.", "url": "http://localhost/api/v1/Persons", "EventId": 2, "EventName": "AllHostsAllowed" }
{ "time": "2023-09-05 11:58:54.4483", "level": "Debug", "logger": "Microsoft.AspNetCore.Routing.Matching.DfaMatcher", "message": "1 candidate(s) found for the request path '/api/v1/Persons'", "url": "http://localhost/api/v1/Persons", "CandidateCount": 1, "Path": "/api/v1/Persons", "EventId": 1001, "EventName": "CandidatesFound" }
{ "time": "2023-09-05 11:58:54.4483", "level": "Debug", "logger": "Microsoft.AspNetCore.Routing.Matching.DfaMatcher", "message": "Endpoint 'TestBackend.Api.Controllers.PersonsController.GetAllPersons (TestBackend.Api)' with route pattern 'api/v1/Persons' is valid for the request path '/api/v1/Persons'", "url": "http://localhost/api/v1/Persons", "Endpoint": "TestBackend.Api.Controllers.PersonsController.GetAllPersons (TestBackend.Api)", "RoutePattern": "api/v1/Persons", "Path": "/api/v1/Persons", "EventId": 1005, "EventName": "CandidateValid" }
{ "time": "2023-09-05 11:58:54.4483", "level": "Debug", "logger": "Microsoft.AspNetCore.Routing.EndpointRoutingMiddleware", "message": "Request matched endpoint 'TestBackend.Api.Controllers.PersonsController.GetAllPersons (TestBackend.Api)'", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "EndpointName": "TestBackend.Api.Controllers.PersonsController.GetAllPersons (TestBackend.Api)", "EventId": 1, "EventName": "MatchSuccess" }
{ "time": "2023-09-05 11:58:54.4483", "level": "Debug", "logger": "Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware", "message": "Static files was skipped as the request already matched an endpoint.", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "EventId": 15, "EventName": "EndpointMatched" }
{ "time": "2023-09-05 11:58:54.4483", "level": "Info", "logger": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "message": "Executing endpoint 'TestBackend.Api.Controllers.PersonsController.GetAllPersons (TestBackend.Api)'", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "EndpointName": {"Order":0, "RoutePattern":"Microsoft.AspNetCore.Routing.Patterns.RoutePattern", "DisplayName":"TestBackend.Api.Controllers.PersonsController.GetAllPersons (TestBackend.Api)", "Metadata":[], "RequestDelegate":"Microsoft.AspNetCore.Http.RequestDelegate"} }
{ "time": "2023-09-05 11:58:54.4811", "level": "Info", "logger": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "message": "Route matched with {action = \"GetAllPersons\", controller = \"Persons\"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult GetAllPersons() on controller TestBackend.Api.Controllers.PersonsController (TestBackend.Api).", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "RouteData": "{action = \"GetAllPersons\", controller = \"Persons\"}", "MethodInfo": "Microsoft.AspNetCore.Mvc.IActionResult GetAllPersons()", "Controller": "TestBackend.Api.Controllers.PersonsController", "AssemblyName": "TestBackend.Api", "EventId": 102, "EventName": "ControllerActionExecuting" }
{ "time": "2023-09-05 11:58:54.4811", "level": "Debug", "logger": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "message": "Execution plan of authorization filters (in the following order): None", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "FilterType": "authorization", "Filters": ["None"], "EventId": 1, "EventName": "FilterExecutionPlan" }
{ "time": "2023-09-05 11:58:54.4811", "level": "Debug", "logger": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "message": "Execution plan of resource filters (in the following order): None", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "FilterType": "resource", "Filters": ["None"], "EventId": 1, "EventName": "FilterExecutionPlan" }
{ "time": "2023-09-05 11:58:54.4811", "level": "Debug", "logger": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "message": "Execution plan of action filters (in the following order): Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter (Order: -3000), Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter (Order: -2000)", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "FilterType": "action", "Filters": ["Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter (Order: -3000)","Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter (Order: -2000)"], "EventId": 1, "EventName": "FilterExecutionPlan" }
{ "time": "2023-09-05 11:58:54.4811", "level": "Debug", "logger": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "message": "Execution plan of exception filters (in the following order): None", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "FilterType": "exception", "Filters": ["None"], "EventId": 1, "EventName": "FilterExecutionPlan" }
{ "time": "2023-09-05 11:58:54.4811", "level": "Debug", "logger": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "message": "Execution plan of result filters (in the following order): Microsoft.AspNetCore.Mvc.Infrastructure.ClientErrorResultFilter (Order: -2000)", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "FilterType": "result", "Filters": ["Microsoft.AspNetCore.Mvc.Infrastructure.ClientErrorResultFilter (Order: -2000)"], "EventId": 1, "EventName": "FilterExecutionPlan" }
{ "time": "2023-09-05 11:58:54.4811", "level": "Debug", "logger": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "message": "Executing controller factory for controller TestBackend.Api.Controllers.PersonsController (TestBackend.Api)", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "Controller": "TestBackend.Api.Controllers.PersonsController", "AssemblyName": "TestBackend.Api", "EventId": 1, "EventName": "ControllerFactoryExecuting" }
{ "time": "2023-09-05 11:58:54.7664", "level": "Debug", "logger": "Microsoft.EntityFrameworkCore.Infrastructure", "message": "An additional 'IServiceProvider' was created for internal use by Entity Framework. An existing service provider was not used due to the following configuration changes: configuration changed for 'Core:ConfigureWarnings', configuration added for 'SqlServer'.", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "debugInfo": "configuration changed for 'Core:ConfigureWarnings', configuration added for 'SqlServer'", "EventId": 10409, "EventName": "Microsoft.EntityFrameworkCore.Infrastructure.ServiceProviderDebugInfo" }
{ "time": "2023-09-05 11:58:55.8557", "level": "Debug", "logger": "Microsoft.EntityFrameworkCore.Infrastructure", "message": "Entity Framework Core 7.0.10 initialized 'ApplicationContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:7.0.10' with options: None", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "version": "7.0.10", "contextType": "ApplicationContext", "provider": "Microsoft.EntityFrameworkCore.SqlServer", "providerVersion": "7.0.10", "options": "None", "EventId": 10403, "EventName": "Microsoft.EntityFrameworkCore.Infrastructure.ContextInitialized" }
{ "time": "2023-09-05 11:58:55.8972", "level": "Debug", "logger": "Microsoft.EntityFrameworkCore.Database.Connection", "message": "Creating DbConnection.", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "EventId": 20005, "EventName": "Microsoft.EntityFrameworkCore.Database.Connection.ConnectionCreating" }
{ "time": "2023-09-05 11:58:55.9497", "level": "Debug", "logger": "Microsoft.EntityFrameworkCore.Database.Connection", "message": "Created DbConnection. (55ms).", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "elapsed": 55, "EventId": 20006, "EventName": "Microsoft.EntityFrameworkCore.Database.Connection.ConnectionCreated" }
{ "time": "2023-09-05 11:58:55.9497", "level": "Debug", "logger": "Microsoft.EntityFrameworkCore.Database.Connection", "message": "Opening connection to database 'TestBackend' on server '(localdb)\\mssqllocaldb'.", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "database": "TestBackend", "server": "(localdb)\\mssqllocaldb", "EventId": 20000, "EventName": "Microsoft.EntityFrameworkCore.Database.Connection.ConnectionOpening" }
{ "time": "2023-09-05 11:59:01.8708", "level": "Debug", "logger": "Microsoft.EntityFrameworkCore.Database.Connection", "message": "Opened connection to database 'TestBackend' on server '(localdb)\\mssqllocaldb'.", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "database": "TestBackend", "server": "(localdb)\\mssqllocaldb", "EventId": 20001, "EventName": "Microsoft.EntityFrameworkCore.Database.Connection.ConnectionOpened" }
{ "time": "2023-09-05 11:59:01.8708", "level": "Debug", "logger": "Microsoft.EntityFrameworkCore.Database.Command", "message": "Creating DbCommand for 'ExecuteNonQuery'.", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "executionType": "ExecuteNonQuery", "EventId": 20103, "EventName": "Microsoft.EntityFrameworkCore.Database.Command.CommandCreating" }
{ "time": "2023-09-05 11:59:01.8865", "level": "Debug", "logger": "Microsoft.EntityFrameworkCore.Database.Command", "message": "Created DbCommand for 'ExecuteNonQuery' (6ms).", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "executionType": "ExecuteNonQuery", "elapsed": 6, "EventId": 20104, "EventName": "Microsoft.EntityFrameworkCore.Database.Command.CommandCreated" }
{ "time": "2023-09-05 11:59:01.8865", "level": "Debug", "logger": "Microsoft.EntityFrameworkCore.Database.Command", "message": "Initialized DbCommand for 'ExecuteNonQuery' (13ms).", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "executionType": "ExecuteNonQuery", "elapsed": 13, "EventId": 20106, "EventName": "Microsoft.EntityFrameworkCore.Database.Command.CommandInitialized" }
{ "time": "2023-09-05 11:59:01.8865", "level": "Debug", "logger": "Microsoft.EntityFrameworkCore.Database.Command", "message": "Executing DbCommand [Parameters=[], CommandType='Text', CommandTimeout='30']\r\nSELECT 1", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "parameters": "", "commandType": "Text", "commandTimeout": 30, "newLine": "\r\n", "commandText": "SELECT 1", "EventId": 20100, "EventName": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuting" }
{ "time": "2023-09-05 11:59:01.9453", "level": "Info", "logger": "Microsoft.EntityFrameworkCore.Database.Command", "message": "Executed DbCommand (40ms) [Parameters=[], CommandType='Text', CommandTimeout='30']\r\nSELECT 1", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "elapsed": "40", "parameters": "", "commandType": "Text", "commandTimeout": 30, "newLine": "\r\n", "commandText": "SELECT 1", "EventId": 20101, "EventName": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted" }
{ "time": "2023-09-05 11:59:01.9480", "level": "Debug", "logger": "Microsoft.EntityFrameworkCore.Database.Connection", "message": "Closing connection to database 'TestBackend' on server '(localdb)\\mssqllocaldb'.", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "database": "TestBackend", "server": "(localdb)\\mssqllocaldb", "EventId": 20002, "EventName": "Microsoft.EntityFrameworkCore.Database.Connection.ConnectionClosing" }
{ "time": "2023-09-05 11:59:01.9480", "level": "Debug", "logger": "Microsoft.EntityFrameworkCore.Database.Connection", "message": "Closed connection to database 'TestBackend' on server '(localdb)\\mssqllocaldb' (6ms).", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "database": "TestBackend", "server": "(localdb)\\mssqllocaldb", "elapsed": 6, "EventId": 20003, "EventName": "Microsoft.EntityFrameworkCore.Database.Connection.ConnectionClosed" }
{ "time": "2023-09-05 11:59:01.9480", "level": "Debug", "logger": "Microsoft.EntityFrameworkCore.Database.Command", "message": "Creating DbCommand for 'ExecuteScalar'.", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "executionType": "ExecuteScalar", "EventId": 20103, "EventName": "Microsoft.EntityFrameworkCore.Database.Command.CommandCreating" }
{ "time": "2023-09-05 11:59:01.9480", "level": "Debug", "logger": "Microsoft.EntityFrameworkCore.Database.Command", "message": "Created DbCommand for 'ExecuteScalar' (0ms).", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "executionType": "ExecuteScalar", "elapsed": 0, "EventId": 20104, "EventName": "Microsoft.EntityFrameworkCore.Database.Command.CommandCreated" }
{ "time": "2023-09-05 11:59:01.9480", "level": "Debug", "logger": "Microsoft.EntityFrameworkCore.Database.Command", "message": "Initialized DbCommand for 'ExecuteScalar' (0ms).", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "executionType": "ExecuteScalar", "elapsed": 0, "EventId": 20106, "EventName": "Microsoft.EntityFrameworkCore.Database.Command.CommandInitialized" }
{ "time": "2023-09-05 11:59:01.9480", "level": "Debug", "logger": "Microsoft.EntityFrameworkCore.Database.Connection", "message": "Opening connection to database 'TestBackend' on server '(localdb)\\mssqllocaldb'.", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "database": "TestBackend", "server": "(localdb)\\mssqllocaldb", "EventId": 20000, "EventName": "Microsoft.EntityFrameworkCore.Database.Connection.ConnectionOpening" }
{ "time": "2023-09-05 11:59:01.9624", "level": "Debug", "logger": "Microsoft.EntityFrameworkCore.Database.Connection", "message": "Opened connection to database 'TestBackend' on server '(localdb)\\mssqllocaldb'.", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "database": "TestBackend", "server": "(localdb)\\mssqllocaldb", "EventId": 20001, "EventName": "Microsoft.EntityFrameworkCore.Database.Connection.ConnectionOpened" }
{ "time": "2023-09-05 11:59:01.9624", "level": "Debug", "logger": "Microsoft.EntityFrameworkCore.Database.Command", "message": "Executing DbCommand [Parameters=[], CommandType='Text', CommandTimeout='30']\r\n\r\nIF EXISTS\r\n    (SELECT *\r\n     FROM [sys].[objects] o\r\n     WHERE [o].[type] = 'U'\r\n     AND [o].[is_ms_shipped] = 0\r\n     AND NOT EXISTS (SELECT *\r\n         FROM [sys].[extended_properties] AS [ep]\r\n         WHERE [ep].[major_id] = [o].[object_id]\r\n             AND [ep].[minor_id] = 0\r\n             AND [ep].[class] = 1\r\n             AND [ep].[name] = N'microsoft_database_tools_support'\r\n    )\r\n)\r\nSELECT 1 ELSE SELECT 0", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "parameters": "", "commandType": "Text", "commandTimeout": 30, "newLine": "\r\n", "commandText": "\r\nIF EXISTS\r\n    (SELECT *\r\n     FROM [sys].[objects] o\r\n     WHERE [o].[type] = 'U'\r\n     AND [o].[is_ms_shipped] = 0\r\n     AND NOT EXISTS (SELECT *\r\n         FROM [sys].[extended_properties] AS [ep]\r\n         WHERE [ep].[major_id] = [o].[object_id]\r\n             AND [ep].[minor_id] = 0\r\n             AND [ep].[class] = 1\r\n             AND [ep].[name] = N'microsoft_database_tools_support'\r\n    )\r\n)\r\nSELECT 1 ELSE SELECT 0", "EventId": 20100, "EventName": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuting" }
{ "time": "2023-09-05 11:59:02.2688", "level": "Info", "logger": "Microsoft.EntityFrameworkCore.Database.Command", "message": "Executed DbCommand (306ms) [Parameters=[], CommandType='Text', CommandTimeout='30']\r\n\r\nIF EXISTS\r\n    (SELECT *\r\n     FROM [sys].[objects] o\r\n     WHERE [o].[type] = 'U'\r\n     AND [o].[is_ms_shipped] = 0\r\n     AND NOT EXISTS (SELECT *\r\n         FROM [sys].[extended_properties] AS [ep]\r\n         WHERE [ep].[major_id] = [o].[object_id]\r\n             AND [ep].[minor_id] = 0\r\n             AND [ep].[class] = 1\r\n             AND [ep].[name] = N'microsoft_database_tools_support'\r\n    )\r\n)\r\nSELECT 1 ELSE SELECT 0", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "elapsed": "306", "parameters": "", "commandType": "Text", "commandTimeout": 30, "newLine": "\r\n", "commandText": "\r\nIF EXISTS\r\n    (SELECT *\r\n     FROM [sys].[objects] o\r\n     WHERE [o].[type] = 'U'\r\n     AND [o].[is_ms_shipped] = 0\r\n     AND NOT EXISTS (SELECT *\r\n         FROM [sys].[extended_properties] AS [ep]\r\n         WHERE [ep].[major_id] = [o].[object_id]\r\n             AND [ep].[minor_id] = 0\r\n             AND [ep].[class] = 1\r\n             AND [ep].[name] = N'microsoft_database_tools_support'\r\n    )\r\n)\r\nSELECT 1 ELSE SELECT 0", "EventId": 20101, "EventName": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted" }
{ "time": "2023-09-05 11:59:02.2688", "level": "Debug", "logger": "Microsoft.EntityFrameworkCore.Database.Connection", "message": "Closing connection to database 'TestBackend' on server '(localdb)\\mssqllocaldb'.", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "database": "TestBackend", "server": "(localdb)\\mssqllocaldb", "EventId": 20002, "EventName": "Microsoft.EntityFrameworkCore.Database.Connection.ConnectionClosing" }
{ "time": "2023-09-05 11:59:02.2688", "level": "Debug", "logger": "Microsoft.EntityFrameworkCore.Database.Connection", "message": "Closed connection to database 'TestBackend' on server '(localdb)\\mssqllocaldb' (0ms).", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "database": "TestBackend", "server": "(localdb)\\mssqllocaldb", "elapsed": 0, "EventId": 20003, "EventName": "Microsoft.EntityFrameworkCore.Database.Connection.ConnectionClosed" }
{ "time": "2023-09-05 11:59:02.2688", "level": "Debug", "logger": "TestBackend.Api.Controllers.PersonsController", "message": "NLog injected into TestBackend", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons" }
{ "time": "2023-09-05 11:59:02.2688", "level": "Debug", "logger": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "message": "Executed controller factory for controller TestBackend.Api.Controllers.PersonsController (TestBackend.Api)", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "Controller": "TestBackend.Api.Controllers.PersonsController", "AssemblyName": "TestBackend.Api", "EventId": 2, "EventName": "ControllerFactoryExecuted" }
{ "time": "2023-09-05 11:59:02.2688", "level": "Trace", "logger": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "message": "Action Filter: Before executing OnActionExecuting on filter Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter.", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "FilterType": "Action Filter", "Method": "OnActionExecuting", "Filter": {"Order":-3000}, "EventId": 52, "EventName": "BeforeExecutingMethodOnFilter" }
{ "time": "2023-09-05 11:59:02.2688", "level": "Trace", "logger": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "message": "Action Filter: After executing OnActionExecuting on filter Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter.", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "FilterType": "Action Filter", "Method": "OnActionExecuting", "Filter": {"Order":-3000}, "EventId": 53, "EventName": "AfterExecutingMethodOnFilter" }
{ "time": "2023-09-05 11:59:02.2688", "level": "Trace", "logger": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "message": "Action Filter: Before executing OnActionExecuting on filter Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter.", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "FilterType": "Action Filter", "Method": "OnActionExecuting", "Filter": {"Order":-2000, "IsReusable":true}, "EventId": 52, "EventName": "BeforeExecutingMethodOnFilter" }
{ "time": "2023-09-05 11:59:02.2688", "level": "Trace", "logger": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "message": "Action Filter: After executing OnActionExecuting on filter Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter.", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "FilterType": "Action Filter", "Method": "OnActionExecuting", "Filter": {"Order":-2000, "IsReusable":true}, "EventId": 53, "EventName": "AfterExecutingMethodOnFilter" }
{ "time": "2023-09-05 11:59:02.2789", "level": "Info", "logger": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "message": "Executing action method TestBackend.Api.Controllers.PersonsController.GetAllPersons (TestBackend.Api) - Validation state: Valid", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "ActionName": "TestBackend.Api.Controllers.PersonsController.GetAllPersons (TestBackend.Api)", "ValidationState": "Valid", "EventId": 101, "EventName": "ActionMethodExecuting" }
{ "time": "2023-09-05 11:59:02.3563", "level": "Debug", "logger": "Microsoft.EntityFrameworkCore.Query", "message": "Compiling query expression: \r\n'DbSet<Person>()\r\n    .Include(p => p.Skills)'", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "newline": "\r\n", "queryExpression": "DbSet<Person>()\r\n    .Include(p => p.Skills)", "EventId": 10111, "EventName": "Microsoft.EntityFrameworkCore.Query.QueryCompilationStarting" }
{ "time": "2023-09-05 11:59:02.4743", "level": "Debug", "logger": "Microsoft.EntityFrameworkCore.Query", "message": "Including navigation: 'Person.Skills'.", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "navigation": "Person.Skills", "EventId": 10112, "EventName": "Microsoft.EntityFrameworkCore.Query.NavigationBaseIncluded" }
{ "time": "2023-09-05 11:59:02.7742", "level": "Debug", "logger": "Microsoft.EntityFrameworkCore.Query", "message": "Generated query execution expression: \r\n'queryContext => new SingleQueryingEnumerable<Person>(\r\n    (RelationalQueryContext)queryContext, \r\n    RelationalCommandCache.QueryExpression(\r\n        Client Projections:\r\n            0 -> Dictionary<IProperty, int> { [Property: Person.Id (long) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Person.DisplayName (string) Required, 1], [Property: Person.Name (string) Required, 2] }\r\n            1 -> 0\r\n            2 -> Dictionary<IProperty, int> { [Property: Skill.Id (long) Required PK AfterSave:Throw ValueGenerated.OnAdd, 3], [Property: Skill.Level (byte) Required, 4], [Property: Skill.Name (string) Required, 5], [Property: Skill.PersonId (long) Required FK Index, 6] }\r\n            3 -> 3\r\n        SELECT p.Id, p.DisplayName, p.Name, s.Id, s.Level, s.Name, s.PersonId\r\n        FROM Persons AS p\r\n        LEFT JOIN Skills AS s ON p.Id == s.PersonId\r\n        ORDER BY p.Id ASC), \r\n    null, \r\n    Func<QueryContext, DbDataReader, ResultContext, SingleQueryResultCoordinator, Person>, \r\n    TestBackend.Api.Models.Data.ApplicationContext, \r\n    False, \r\n    False, \r\n    True\r\n)'", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "newline": "\r\n", "plan": "queryContext => new SingleQueryingEnumerable<Person>(\r\n    (RelationalQueryContext)queryContext, \r\n    RelationalCommandCache.QueryExpression(\r\n        Client Projections:\r\n            0 -> Dictionary<IProperty, int> { [Property: Person.Id (long) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Person.DisplayName (string) Required, 1], [Property: Person.Name (string) Required, 2] }\r\n            1 -> 0\r\n            2 -> Dictionary<IProperty, int> { [Property: Skill.Id (long) Required PK AfterSave:Throw ValueGenerated.OnAdd, 3], [Property: Skill.Level (byte) Required, 4], [Property: Skill.Name (string) Required, 5], [Property: Skill.PersonId (long) Required FK Index, 6] }\r\n            3 -> 3\r\n        SELECT p.Id, p.DisplayName, p.Name, s.Id, s.Level, s.Name, s.PersonId\r\n        FROM Persons AS p\r\n        LEFT JOIN Skills AS s ON p.Id == s.PersonId\r\n        ORDER BY p.Id ASC), \r\n    null, \r\n    Func<QueryContext, DbDataReader, ResultContext, SingleQueryResultCoordinator, Person>, \r\n    TestBackend.Api.Models.Data.ApplicationContext, \r\n    False, \r\n    False, \r\n    True\r\n)", "EventId": 10107, "EventName": "Microsoft.EntityFrameworkCore.Query.QueryExecutionPlanned" }
{ "time": "2023-09-05 11:59:02.8050", "level": "Debug", "logger": "Microsoft.EntityFrameworkCore.Database.Command", "message": "Creating DbCommand for 'ExecuteReader'.", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "executionType": "ExecuteReader", "EventId": 20103, "EventName": "Microsoft.EntityFrameworkCore.Database.Command.CommandCreating" }
{ "time": "2023-09-05 11:59:02.8050", "level": "Debug", "logger": "Microsoft.EntityFrameworkCore.Database.Command", "message": "Created DbCommand for 'ExecuteReader' (0ms).", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "executionType": "ExecuteReader", "elapsed": 0, "EventId": 20104, "EventName": "Microsoft.EntityFrameworkCore.Database.Command.CommandCreated" }
{ "time": "2023-09-05 11:59:02.8050", "level": "Debug", "logger": "Microsoft.EntityFrameworkCore.Database.Command", "message": "Initialized DbCommand for 'ExecuteReader' (0ms).", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "executionType": "ExecuteReader", "elapsed": 0, "EventId": 20106, "EventName": "Microsoft.EntityFrameworkCore.Database.Command.CommandInitialized" }
{ "time": "2023-09-05 11:59:02.8050", "level": "Debug", "logger": "Microsoft.EntityFrameworkCore.Database.Connection", "message": "Opening connection to database 'TestBackend' on server '(localdb)\\mssqllocaldb'.", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "database": "TestBackend", "server": "(localdb)\\mssqllocaldb", "EventId": 20000, "EventName": "Microsoft.EntityFrameworkCore.Database.Connection.ConnectionOpening" }
{ "time": "2023-09-05 11:59:02.8050", "level": "Debug", "logger": "Microsoft.EntityFrameworkCore.Database.Connection", "message": "Opened connection to database 'TestBackend' on server '(localdb)\\mssqllocaldb'.", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "database": "TestBackend", "server": "(localdb)\\mssqllocaldb", "EventId": 20001, "EventName": "Microsoft.EntityFrameworkCore.Database.Connection.ConnectionOpened" }
{ "time": "2023-09-05 11:59:02.8059", "level": "Debug", "logger": "Microsoft.EntityFrameworkCore.Database.Command", "message": "Executing DbCommand [Parameters=[], CommandType='Text', CommandTimeout='30']\r\nSELECT [p].[Id], [p].[DisplayName], [p].[Name], [s].[Id], [s].[Level], [s].[Name], [s].[PersonId]\r\nFROM [Persons] AS [p]\r\nLEFT JOIN [Skills] AS [s] ON [p].[Id] = [s].[PersonId]\r\nORDER BY [p].[Id]", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "parameters": "", "commandType": "Text", "commandTimeout": 30, "newLine": "\r\n", "commandText": "SELECT [p].[Id], [p].[DisplayName], [p].[Name], [s].[Id], [s].[Level], [s].[Name], [s].[PersonId]\r\nFROM [Persons] AS [p]\r\nLEFT JOIN [Skills] AS [s] ON [p].[Id] = [s].[PersonId]\r\nORDER BY [p].[Id]", "EventId": 20100, "EventName": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuting" }
{ "time": "2023-09-05 11:59:02.8248", "level": "Info", "logger": "Microsoft.EntityFrameworkCore.Database.Command", "message": "Executed DbCommand (19ms) [Parameters=[], CommandType='Text', CommandTimeout='30']\r\nSELECT [p].[Id], [p].[DisplayName], [p].[Name], [s].[Id], [s].[Level], [s].[Name], [s].[PersonId]\r\nFROM [Persons] AS [p]\r\nLEFT JOIN [Skills] AS [s] ON [p].[Id] = [s].[PersonId]\r\nORDER BY [p].[Id]", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "elapsed": "19", "parameters": "", "commandType": "Text", "commandTimeout": 30, "newLine": "\r\n", "commandText": "SELECT [p].[Id], [p].[DisplayName], [p].[Name], [s].[Id], [s].[Level], [s].[Name], [s].[PersonId]\r\nFROM [Persons] AS [p]\r\nLEFT JOIN [Skills] AS [s] ON [p].[Id] = [s].[PersonId]\r\nORDER BY [p].[Id]", "EventId": 20101, "EventName": "Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted" }
{ "time": "2023-09-05 11:59:02.8715", "level": "Debug", "logger": "Microsoft.EntityFrameworkCore.ChangeTracking", "message": "Context 'ApplicationContext' started tracking 'Person' entity. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "contextType": "ApplicationContext", "entityType": "Person", "EventId": 10806, "EventName": "Microsoft.EntityFrameworkCore.ChangeTracking.StartedTracking" }
{ "time": "2023-09-05 11:59:02.9305", "level": "Debug", "logger": "Microsoft.EntityFrameworkCore.ChangeTracking", "message": "Context 'ApplicationContext' started tracking 'Skill' entity. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "contextType": "ApplicationContext", "entityType": "Skill", "EventId": 10806, "EventName": "Microsoft.EntityFrameworkCore.ChangeTracking.StartedTracking" }
{ "time": "2023-09-05 11:59:02.9401", "level": "Debug", "logger": "Microsoft.EntityFrameworkCore.ChangeTracking", "message": "Context 'ApplicationContext' started tracking 'Skill' entity. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "contextType": "ApplicationContext", "entityType": "Skill", "EventId": 10806, "EventName": "Microsoft.EntityFrameworkCore.ChangeTracking.StartedTracking" }
{ "time": "2023-09-05 11:59:02.9401", "level": "Debug", "logger": "Microsoft.EntityFrameworkCore.ChangeTracking", "message": "Context 'ApplicationContext' started tracking 'Person' entity. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "contextType": "ApplicationContext", "entityType": "Person", "EventId": 10806, "EventName": "Microsoft.EntityFrameworkCore.ChangeTracking.StartedTracking" }
{ "time": "2023-09-05 11:59:02.9401", "level": "Debug", "logger": "Microsoft.EntityFrameworkCore.ChangeTracking", "message": "Context 'ApplicationContext' started tracking 'Skill' entity. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "contextType": "ApplicationContext", "entityType": "Skill", "EventId": 10806, "EventName": "Microsoft.EntityFrameworkCore.ChangeTracking.StartedTracking" }
{ "time": "2023-09-05 11:59:02.9401", "level": "Debug", "logger": "Microsoft.EntityFrameworkCore.ChangeTracking", "message": "Context 'ApplicationContext' started tracking 'Person' entity. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "contextType": "ApplicationContext", "entityType": "Person", "EventId": 10806, "EventName": "Microsoft.EntityFrameworkCore.ChangeTracking.StartedTracking" }
{ "time": "2023-09-05 11:59:02.9401", "level": "Debug", "logger": "Microsoft.EntityFrameworkCore.ChangeTracking", "message": "Context 'ApplicationContext' started tracking 'Skill' entity. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "contextType": "ApplicationContext", "entityType": "Skill", "EventId": 10806, "EventName": "Microsoft.EntityFrameworkCore.ChangeTracking.StartedTracking" }
{ "time": "2023-09-05 11:59:02.9401", "level": "Debug", "logger": "Microsoft.EntityFrameworkCore.ChangeTracking", "message": "Context 'ApplicationContext' started tracking 'Skill' entity. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "contextType": "ApplicationContext", "entityType": "Skill", "EventId": 10806, "EventName": "Microsoft.EntityFrameworkCore.ChangeTracking.StartedTracking" }
{ "time": "2023-09-05 11:59:02.9470", "level": "Debug", "logger": "Microsoft.EntityFrameworkCore.Database.Command", "message": "Closing data reader to 'TestBackend' on server '(localdb)\\mssqllocaldb'.", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "database": "TestBackend", "server": "(localdb)\\mssqllocaldb", "EventId": 20301, "EventName": "Microsoft.EntityFrameworkCore.Database.Command.DataReaderClosing" }
{ "time": "2023-09-05 11:59:02.9470", "level": "Debug", "logger": "Microsoft.EntityFrameworkCore.Database.Command", "message": "A data reader for 'TestBackend' on server '(localdb)\\mssqllocaldb' is being disposed after spending 121ms reading results.", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "database": "TestBackend", "server": "(localdb)\\mssqllocaldb", "elapsed": 121, "EventId": 20300, "EventName": "Microsoft.EntityFrameworkCore.Database.Command.DataReaderDisposing" }
{ "time": "2023-09-05 11:59:02.9470", "level": "Debug", "logger": "Microsoft.EntityFrameworkCore.Database.Connection", "message": "Closing connection to database 'TestBackend' on server '(localdb)\\mssqllocaldb'.", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "database": "TestBackend", "server": "(localdb)\\mssqllocaldb", "EventId": 20002, "EventName": "Microsoft.EntityFrameworkCore.Database.Connection.ConnectionClosing" }
{ "time": "2023-09-05 11:59:02.9470", "level": "Debug", "logger": "Microsoft.EntityFrameworkCore.Database.Connection", "message": "Closed connection to database 'TestBackend' on server '(localdb)\\mssqllocaldb' (0ms).", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "database": "TestBackend", "server": "(localdb)\\mssqllocaldb", "elapsed": 0, "EventId": 20003, "EventName": "Microsoft.EntityFrameworkCore.Database.Connection.ConnectionClosed" }
{ "time": "2023-09-05 11:59:02.9470", "level": "Info", "logger": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "message": "Executed action method TestBackend.Api.Controllers.PersonsController.GetAllPersons (TestBackend.Api), returned result Microsoft.AspNetCore.Mvc.OkObjectResult in 673.4445ms.", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "ActionName": "TestBackend.Api.Controllers.PersonsController.GetAllPersons (TestBackend.Api)", "ActionResult": "Microsoft.AspNetCore.Mvc.OkObjectResult", "ElapsedMilliseconds": 673.4445, "EventId": 103, "EventName": "ActionMethodExecuted" }
{ "time": "2023-09-05 11:59:02.9470", "level": "Trace", "logger": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "message": "Action Filter: Before executing OnActionExecuted on filter Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter.", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "FilterType": "Action Filter", "Method": "OnActionExecuted", "Filter": {"Order":-2000, "IsReusable":true}, "EventId": 52, "EventName": "BeforeExecutingMethodOnFilter" }
{ "time": "2023-09-05 11:59:02.9470", "level": "Trace", "logger": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "message": "Action Filter: After executing OnActionExecuted on filter Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter.", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "FilterType": "Action Filter", "Method": "OnActionExecuted", "Filter": {"Order":-2000, "IsReusable":true}, "EventId": 53, "EventName": "AfterExecutingMethodOnFilter" }
{ "time": "2023-09-05 11:59:02.9470", "level": "Trace", "logger": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "message": "Action Filter: Before executing OnActionExecuted on filter Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter.", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "FilterType": "Action Filter", "Method": "OnActionExecuted", "Filter": {"Order":-3000}, "EventId": 52, "EventName": "BeforeExecutingMethodOnFilter" }
{ "time": "2023-09-05 11:59:02.9470", "level": "Trace", "logger": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "message": "Action Filter: After executing OnActionExecuted on filter Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter.", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "FilterType": "Action Filter", "Method": "OnActionExecuted", "Filter": {"Order":-3000}, "EventId": 53, "EventName": "AfterExecutingMethodOnFilter" }
{ "time": "2023-09-05 11:59:02.9470", "level": "Trace", "logger": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "message": "Result Filter: Before executing OnResultExecuting on filter Microsoft.AspNetCore.Mvc.Infrastructure.ClientErrorResultFilter.", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "FilterType": "Result Filter", "Method": "OnResultExecuting", "Filter": {"Order":-2000}, "EventId": 52, "EventName": "BeforeExecutingMethodOnFilter" }
{ "time": "2023-09-05 11:59:02.9470", "level": "Trace", "logger": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "message": "Result Filter: After executing OnResultExecuting on filter Microsoft.AspNetCore.Mvc.Infrastructure.ClientErrorResultFilter.", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "FilterType": "Result Filter", "Method": "OnResultExecuting", "Filter": {"Order":-2000}, "EventId": 53, "EventName": "AfterExecutingMethodOnFilter" }
{ "time": "2023-09-05 11:59:02.9470", "level": "Trace", "logger": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "message": "Before executing action result Microsoft.AspNetCore.Mvc.OkObjectResult.", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "ActionResult": "Microsoft.AspNetCore.Mvc.OkObjectResult", "EventId": 5, "EventName": "BeforeExecutingActionResult" }
{ "time": "2023-09-05 11:59:02.9470", "level": "Debug", "logger": "Microsoft.AspNetCore.Mvc.Infrastructure.DefaultOutputFormatterSelector", "message": "List of registered output formatters, in the following order: Microsoft.AspNetCore.Mvc.Formatters.HttpNoContentOutputFormatter, Microsoft.AspNetCore.Mvc.Formatters.StringOutputFormatter, Microsoft.AspNetCore.Mvc.Formatters.StreamOutputFormatter, Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "OutputFormatters": [{"TreatNullValueAsNoContent":true},{"SupportedEncodings":[], "SupportedMediaTypes":[]},"Microsoft.AspNetCore.Mvc.Formatters.StreamOutputFormatter",{"SerializerOptions":"System.Text.Json.JsonSerializerOptions", "SupportedEncodings":[], "SupportedMediaTypes":[]}], "EventId": 11, "EventName": "RegisteredOutputFormatters" }
{ "time": "2023-09-05 11:59:02.9470", "level": "Debug", "logger": "Microsoft.AspNetCore.Mvc.Infrastructure.DefaultOutputFormatterSelector", "message": "No information found on request to perform content negotiation.", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "EventId": 4, "EventName": "NoAcceptForNegotiation" }
{ "time": "2023-09-05 11:59:02.9470", "level": "Debug", "logger": "Microsoft.AspNetCore.Mvc.Infrastructure.DefaultOutputFormatterSelector", "message": "Attempting to select an output formatter without using a content type as no explicit content types were specified for the response.", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "EventId": 8, "EventName": "SelectingOutputFormatterWithoutUsingContentTypes" }
{ "time": "2023-09-05 11:59:02.9470", "level": "Debug", "logger": "Microsoft.AspNetCore.Mvc.Infrastructure.DefaultOutputFormatterSelector", "message": "Attempting to select the first formatter in the output formatters list which can write the result.", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "EventId": 10, "EventName": "SelectingFirstCanWriteFormatter" }
{ "time": "2023-09-05 11:59:02.9638", "level": "Debug", "logger": "Microsoft.AspNetCore.Mvc.Infrastructure.DefaultOutputFormatterSelector", "message": "Selected output formatter 'Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter' and content type 'application/json' to write the response.", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "OutputFormatter": {"SerializerOptions":"System.Text.Json.JsonSerializerOptions", "SupportedEncodings":[], "SupportedMediaTypes":[]}, "ContentType": "application/json", "EventId": 2, "EventName": "FormatterSelected" }
{ "time": "2023-09-05 11:59:02.9638", "level": "Info", "logger": "Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor", "message": "Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[TestBackend.Common.Models.PersonModel, TestBackend.Common.Models, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "ObjectResultType": "OkObjectResult", "Type": "System.Collections.Generic.List`1[[TestBackend.Common.Models.PersonModel, TestBackend.Common.Models, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]", "EventId": 1, "EventName": "ObjectResultExecuting" }
{ "time": "2023-09-05 11:59:02.9952", "level": "Trace", "logger": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "message": "After executing action result Microsoft.AspNetCore.Mvc.OkObjectResult.", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "ActionResult": "Microsoft.AspNetCore.Mvc.OkObjectResult", "EventId": 6, "EventName": "AfterExecutingActionResult" }
{ "time": "2023-09-05 11:59:02.9952", "level": "Trace", "logger": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "message": "Result Filter: Before executing OnResultExecuted on filter Microsoft.AspNetCore.Mvc.Infrastructure.ClientErrorResultFilter.", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "FilterType": "Result Filter", "Method": "OnResultExecuted", "Filter": {"Order":-2000}, "EventId": 52, "EventName": "BeforeExecutingMethodOnFilter" }
{ "time": "2023-09-05 11:59:02.9952", "level": "Trace", "logger": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "message": "Result Filter: After executing OnResultExecuted on filter Microsoft.AspNetCore.Mvc.Infrastructure.ClientErrorResultFilter.", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "FilterType": "Result Filter", "Method": "OnResultExecuted", "Filter": {"Order":-2000}, "EventId": 53, "EventName": "AfterExecutingMethodOnFilter" }
{ "time": "2023-09-05 11:59:02.9952", "level": "Info", "logger": "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", "message": "Executed action TestBackend.Api.Controllers.PersonsController.GetAllPersons (TestBackend.Api) in 8510.1873ms", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "ActionName": "TestBackend.Api.Controllers.PersonsController.GetAllPersons (TestBackend.Api)", "ElapsedMilliseconds": 8510.1873, "EventId": 105, "EventName": "ActionExecuted" }
{ "time": "2023-09-05 11:59:02.9952", "level": "Info", "logger": "Microsoft.AspNetCore.Routing.EndpointMiddleware", "message": "Executed endpoint 'TestBackend.Api.Controllers.PersonsController.GetAllPersons (TestBackend.Api)'", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "EndpointName": {"Order":0, "RoutePattern":"Microsoft.AspNetCore.Routing.Patterns.RoutePattern", "DisplayName":"TestBackend.Api.Controllers.PersonsController.GetAllPersons (TestBackend.Api)", "Metadata":[], "RequestDelegate":"Microsoft.AspNetCore.Http.RequestDelegate"}, "EventId": 1, "EventName": "ExecutedEndpoint" }
{ "time": "2023-09-05 11:59:02.9952", "level": "Debug", "logger": "Microsoft.EntityFrameworkCore.Infrastructure", "message": "'ApplicationContext' disposed.", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "contextType": "ApplicationContext", "EventId": 10407, "EventName": "Microsoft.EntityFrameworkCore.Infrastructure.ContextDisposed" }
{ "time": "2023-09-05 11:59:03.0149", "level": "Debug", "logger": "Microsoft.EntityFrameworkCore.Database.Connection", "message": "Disposing connection to database 'TestBackend' on server '(localdb)\\mssqllocaldb'.", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "database": "TestBackend", "server": "(localdb)\\mssqllocaldb", "EventId": 20007, "EventName": "Microsoft.EntityFrameworkCore.Database.Connection.ConnectionDisposing" }
{ "time": "2023-09-05 11:59:03.0149", "level": "Debug", "logger": "Microsoft.EntityFrameworkCore.Database.Connection", "message": "Disposed connection to database '' on server '' (3ms).", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "database": "", "server": "", "elapsed": 3, "EventId": 20008, "EventName": "Microsoft.EntityFrameworkCore.Database.Connection.ConnectionDisposed" }
{ "time": "2023-09-05 11:59:03.0149", "level": "Info", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request finished HTTP/1.1 GET http://localhost:42486/api/v1/Persons - - - 200 - application/json;+charset=utf-8 8580.4053ms", "url": "http://localhost/api/v1/Persons", "action": "GetAllPersons", "ElapsedMilliseconds": 8580.4053, "StatusCode": 200, "ContentType": "application/json; charset=utf-8", "ContentLength": null, "Protocol": "HTTP/1.1", "Method": "GET", "Scheme": "http", "Host": "localhost:42486", "PathBase": "", "Path": "/api/v1/Persons", "QueryString": "", "EventId": 2 }
{ "time": "2023-09-05 12:24:32.4062", "level": "Debug", "logger": "Program", "message": "init main" }
{ "time": "2023-09-05 12:24:34.9083", "level": "Debug", "logger": "Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderFactory", "message": "Registered model binder providers, in the following order: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BinderTypeModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ServicesModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BodyModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.HeaderModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FloatingPointTypeModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.EnumTypeModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DateTimeModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.SimpleTypeModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.TryParseModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CancellationTokenModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ByteArrayModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormFileModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormCollectionModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.KeyValuePairModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DictionaryModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ArrayModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinderProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexObjectModelBinderProvider", "ModelBinderProviders": ["Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BinderTypeModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ServicesModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BodyModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.HeaderModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FloatingPointTypeModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.EnumTypeModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DateTimeModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.SimpleTypeModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.TryParseModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CancellationTokenModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ByteArrayModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormFileModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormCollectionModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.KeyValuePairModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DictionaryModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ArrayModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexObjectModelBinderProvider"], "EventId": 12, "EventName": "RegisteredModelBinderProviders" }
{ "time": "2023-09-05 12:24:35.8417", "level": "Debug", "logger": "Microsoft.Extensions.Hosting.Internal.Host", "message": "Hosting starting", "EventId": 1, "EventName": "Starting" }
{ "time": "2023-09-05 12:24:36.3909", "level": "Debug", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Loaded hosting startup assembly TestBackend.Api", "assemblyName": "TestBackend.Api", "EventId": 13, "EventName": "HostingStartupAssemblyLoaded" }
{ "time": "2023-09-05 12:24:36.3909", "level": "Debug", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Loaded hosting startup assembly Microsoft.AspNetCore.Watch.BrowserRefresh", "assemblyName": "Microsoft.AspNetCore.Watch.BrowserRefresh", "EventId": 13, "EventName": "HostingStartupAssemblyLoaded" }
{ "time": "2023-09-05 12:24:36.3909", "level": "Debug", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Loaded hosting startup assembly Microsoft.WebTools.BrowserLink.Net", "assemblyName": "Microsoft.WebTools.BrowserLink.Net", "EventId": 13, "EventName": "HostingStartupAssemblyLoaded" }
{ "time": "2023-09-05 12:24:36.3909", "level": "Info", "logger": "Microsoft.Hosting.Lifetime", "message": "Application started. Press Ctrl+C to shut down." }
{ "time": "2023-09-05 12:24:36.3909", "level": "Info", "logger": "Microsoft.Hosting.Lifetime", "message": "Hosting environment: Development", "EnvName": "Development" }
{ "time": "2023-09-05 12:24:36.3909", "level": "Info", "logger": "Microsoft.Hosting.Lifetime", "message": "Content root path: F:\\Программирование\\Test_Backend\\Test_Backend.Api", "ContentRoot": "F:\\Программирование\\Test_Backend\\Test_Backend.Api" }
{ "time": "2023-09-05 12:24:36.3909", "level": "Debug", "logger": "Microsoft.Extensions.Hosting.Internal.Host", "message": "Hosting started", "EventId": 2, "EventName": "Started" }
{ "time": "2023-09-05 12:24:36.9106", "level": "Info", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request starting HTTP/1.1 GET http://localhost:42486/swagger/index.html - -", "url": "http://localhost/swagger/index.html", "Protocol": "HTTP/1.1", "Method": "GET", "ContentType": null, "ContentLength": null, "Scheme": "http", "Host": "localhost:42486", "PathBase": "", "Path": "/swagger/index.html", "QueryString": "", "EventId": 1 }
{ "time": "2023-09-05 12:24:37.0908", "level": "Debug", "logger": "Microsoft.AspNetCore.HostFiltering.HostFilteringMiddleware", "message": "Wildcard detected, all requests with hosts will be allowed.", "url": "http://localhost/swagger/index.html" }
{ "time": "2023-09-05 12:24:37.0908", "level": "Trace", "logger": "Microsoft.AspNetCore.HostFiltering.HostFilteringMiddleware", "message": "All hosts are allowed.", "url": "http://localhost/swagger/index.html", "EventId": 2, "EventName": "AllHostsAllowed" }
{ "time": "2023-09-05 12:24:37.2146", "level": "Debug", "logger": "Microsoft.AspNetCore.Routing.Matching.DfaMatcher", "message": "No candidates found for the request path '/swagger/index.html'", "url": "http://localhost/swagger/index.html", "Path": "/swagger/index.html", "EventId": 1000, "EventName": "CandidatesNotFound" }
{ "time": "2023-09-05 12:24:37.2146", "level": "Debug", "logger": "Microsoft.AspNetCore.Routing.EndpointRoutingMiddleware", "message": "Request did not match any endpoints", "url": "http://localhost/swagger/index.html", "EventId": 2, "EventName": "MatchFailure" }
{ "time": "2023-09-05 12:24:37.6634", "level": "Debug", "logger": "Microsoft.AspNetCore.Watch.BrowserRefresh.BrowserRefreshMiddleware", "message": "Response markup is scheduled to include browser refresh script injection.", "url": "http://localhost/swagger/index.html", "EventId": 1, "EventName": "SetUpResponseForBrowserRefresh" }
{ "time": "2023-09-05 12:24:41.5331", "level": "Debug", "logger": "Microsoft.AspNetCore.Watch.BrowserRefresh.BrowserRefreshMiddleware", "message": "Response markup was updated to include browser refresh script injection.", "url": "http://localhost/swagger/index.html", "EventId": 2, "EventName": "BrowserConfiguredForRefreshes" }
{ "time": "2023-09-05 12:24:41.5422", "level": "Info", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request finished HTTP/1.1 GET http://localhost:42486/swagger/index.html - - - 200 - text/html;charset=utf-8 4635.6759ms", "url": "http://localhost/swagger/index.html", "ElapsedMilliseconds": 4635.6759, "StatusCode": 200, "ContentType": "text/html;charset=utf-8", "ContentLength": null, "Protocol": "HTTP/1.1", "Method": "GET", "Scheme": "http", "Host": "localhost:42486", "PathBase": "", "Path": "/swagger/index.html", "QueryString": "", "EventId": 2 }
{ "time": "2023-09-05 12:24:41.8233", "level": "Info", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request starting HTTP/1.1 GET http://localhost:42486/_framework/aspnetcore-browser-refresh.js - -", "url": "http://localhost/_framework/aspnetcore-browser-refresh.js", "Protocol": "HTTP/1.1", "Method": "GET", "ContentType": null, "ContentLength": null, "Scheme": "http", "Host": "localhost:42486", "PathBase": "", "Path": "/_framework/aspnetcore-browser-refresh.js", "QueryString": "", "EventId": 1 }
{ "time": "2023-09-05 12:24:41.8233", "level": "Info", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request finished HTTP/1.1 GET http://localhost:42486/_framework/aspnetcore-browser-refresh.js - - - 200 12000 application/javascript;+charset=utf-8 6.0693ms", "url": "http://localhost/_framework/aspnetcore-browser-refresh.js", "ElapsedMilliseconds": 6.0693, "StatusCode": 200, "ContentType": "application/javascript; charset=utf-8", "ContentLength": 12000, "Protocol": "HTTP/1.1", "Method": "GET", "Scheme": "http", "Host": "localhost:42486", "PathBase": "", "Path": "/_framework/aspnetcore-browser-refresh.js", "QueryString": "", "EventId": 2 }
{ "time": "2023-09-05 12:24:42.6582", "level": "Info", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request starting HTTP/1.1 GET http://localhost:42486/swagger/v1/swagger.json - -", "url": "http://localhost/swagger/v1/swagger.json", "Protocol": "HTTP/1.1", "Method": "GET", "ContentType": null, "ContentLength": null, "Scheme": "http", "Host": "localhost:42486", "PathBase": "", "Path": "/swagger/v1/swagger.json", "QueryString": "", "EventId": 1 }
{ "time": "2023-09-05 12:24:42.6582", "level": "Trace", "logger": "Microsoft.AspNetCore.HostFiltering.HostFilteringMiddleware", "message": "All hosts are allowed.", "url": "http://localhost/swagger/v1/swagger.json", "EventId": 2, "EventName": "AllHostsAllowed" }
{ "time": "2023-09-05 12:24:42.6582", "level": "Debug", "logger": "Microsoft.AspNetCore.Routing.Matching.DfaMatcher", "message": "No candidates found for the request path '/swagger/v1/swagger.json'", "url": "http://localhost/swagger/v1/swagger.json", "Path": "/swagger/v1/swagger.json", "EventId": 1000, "EventName": "CandidatesNotFound" }
{ "time": "2023-09-05 12:24:42.6582", "level": "Debug", "logger": "Microsoft.AspNetCore.Routing.EndpointRoutingMiddleware", "message": "Request did not match any endpoints", "url": "http://localhost/swagger/v1/swagger.json", "EventId": 2, "EventName": "MatchFailure" }
{ "time": "2023-09-05 12:24:42.8537", "level": "Info", "logger": "Microsoft.AspNetCore.Hosting.Diagnostics", "message": "Request finished HTTP/1.1 GET http://localhost:42486/swagger/v1/swagger.json - - - 200 - application/json;charset=utf-8 195.4823ms", "url": "http://localhost/swagger/v1/swagger.json", "ElapsedMilliseconds": 195.4823, "StatusCode": 200, "ContentType": "application/json;charset=utf-8", "ContentLength": null, "Protocol": "HTTP/1.1", "Method": "GET", "Scheme": "http", "Host": "localhost:42486", "PathBase": "", "Path": "/swagger/v1/swagger.json", "QueryString": "", "EventId": 2 }
